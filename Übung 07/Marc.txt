Aufgabe 4)
p(x_1, x_2) = x_1^x_2
Sei x_0 beim Start des Programms 1
Sei x_3 beim Start des Programms 0

LOOP x_2 DO
	x_4 := x_3 + 0;
	LOOP x_1 DO
		LOOP x_0 DO
			x_4 := x_4 + 1
		END
	END;
	x_0 = x_4
END

Um zu Exponieren muss x_2 mal multipliziert werden. x_4 ist dabei der Akkumulator der Multiplikation. Dieser wird auf 0 initialisiert und dann wird x_1 * x_0 mal 1 auf diesen akkumulator addiert.
Dann wird x_0 mit diesem neuen Wert aktualisiert.
Dies wird dann x_2 mal wiederholt.

Aufgabe 5)
a)
x_{l+1} := 1;
WHILE x_l != 0 DO
	Q;
	x_{l+1} := 0;
	x_l := 0
END
WHILE x_{l+1} != 0 DO
	P;
	x_{l+1} := 0
END

Ich prüfe ob x_l != 0 ist. Wenn ja führe ich Q aus, setzte dann x_{l+1} auf 0 damit P nachher nicht ausgeführt wird und setzte x_l ebenfalls auf 0 um aus der Schleife zu breaken.
Wenn Q also nicht ausgeführt wurde ist x_{l+1} immer noch 1 und P wird somit ausgeführt. x_{l+1} wird anschliessend ebenfalls auf 0 gesetzt um auch aus dieser Schleife zu breaken.

b)
WHILE x_{k+1} != 0 DO
	WHILE i != 0 DO

Aufgabe 6)
100-VARIABLE-WHILE Programme sind Turing-mächtig, da sie TMs simulieren können.
O.B.d.A: Wir betrachten nun eine eine TM mit dem Bandalphabet {0,1,B} und k Zuständen wobei der Zustand 0 der Endzustand ist.

Um die TM zu simulieren benötigt ein WHILE Programm folgende Variablen:
x_0 als Zustand
x_1 als Wort vor dem Lesekopf
x_2 als Wort nach dem Lesekopf
x_3 als Hilfsvariable für die if-Statements

Das Programm sieht dann folgendermassen aus:
Eine äussere While-Schleife durchläuft das Programm solange x_0 nicht 0 (Endzustand) ist.
In jedem Schleifendurchlauf wird mit k if-Statements geprüft in welchem Zustand sich die TM befindet und mit einem weiteren if-Statement geprüft was unter dem Lesekopf steht.
Dann wird dementsprechend das Band und der Zustand erneuert.
Die if-Statements für die Zustände brauchen eine Hilfsvariable (siehe Aufgabe 5.b))
Das Updaten des Zustands geht ohne weitere Hilfsvariablen.
Für das Updaten des Bandes wird ebenfalls keine Hilfsvariablen benötigt.

Damit kann eine 100-VARIABLE-WHILE Programm die TM locker simulieren und die 100-VARIABLE-WHILE Programme sind Turing-mächtig.